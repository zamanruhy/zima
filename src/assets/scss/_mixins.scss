@mixin font-face(
  $name,
  $path,
  $weight: null,
  $style: null,
  $exts: eot woff2 woff ttf svg
) {
  $src: null;

  $extmods: (
    eot: "?",
    svg: "#" + str-replace($name, " ", "_")
  );

  $formats: (
    otf: "opentype",
    ttf: "truetype"
  );

  @each $ext in $exts {
    $extmod: if(
      map-has-key($extmods, $ext),
      $ext + map-get($extmods, $ext),
      $ext
    );
    $format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
    $src: append(
      $src,
      url(quote($path + "." + $extmod)) format(quote($format)),
      comma
    );
  }

  @font-face {
    font-family: quote($name);
    font-style: $style;
    font-weight: $weight;
    font-display: swap;
    src: $src;
  }
}

@mixin hyphenation() {
  word-break: break-all;
  word-wrap: break-word;
  hyphens: auto;
}

@mixin text-truncate() {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

@mixin visually-hidden() {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  border: 0;
}

@mixin up($min) {
  @if type_of($min) == string {
    $min: map-get($breakpoints, $min);
  }

  @if $min != 0 {
    @media (min-width: $min) {
      @content;
    }
  } @else {
    @content;
  }
}

@mixin down($max) {
  @if type_of($max) == string {
    $max: if($max != xs, map-get($breakpoints, $max) - 1, 0);
  }

  @if $max != 0 {
    @media (max-width: $max) {
      @content;
    }
  }
}

@mixin between($min, $max) {
  @include up($min) {
    @include down($max) {
      @content;
    }
  }
}

@mixin linear(
  $property,
  $value-start,
  $value-end,
  $width-start: $width-start,
  $width-end: $width-end
) {
  @include down($width-start) {
    #{$property}: $value-start;
  }

  @include between($width-start, $width-end) {
    #{$property}: linear($value-start, $value-end, $width-start, $width-end);
  }

  @include up($width-end) {
    #{$property}: $value-end;
  }
}

@mixin triangle($size, $color, $direction) {
  $width: nth($size, 1);
  $height: nth($size, length($size));
  $foreground-color: nth($color, 1);
  $background-color: if(length($color) == 2, nth($color, 2), transparent);
  height: 0;
  width: 0;

  @if ($direction == up) or
    ($direction == down) or
    ($direction == right) or
    ($direction == left)
  {
    $width: $width / 2;
    $height: if(length($size) > 1, $height, $height/2);

    @if $direction == up {
      border-bottom: $height solid $foreground-color;
      border-left: $width solid $background-color;
      border-right: $width solid $background-color;
    } @else if $direction == right {
      border-bottom: $width solid $background-color;
      border-left: $height solid $foreground-color;
      border-top: $width solid $background-color;
    } @else if $direction == down {
      border-left: $width solid $background-color;
      border-right: $width solid $background-color;
      border-top: $height solid $foreground-color;
    } @else if $direction == left {
      border-bottom: $width solid $background-color;
      border-right: $height solid $foreground-color;
      border-top: $width solid $background-color;
    }
  } @else if ($direction == up-right) or ($direction == up-left) {
    border-top: $height solid $foreground-color;

    @if $direction == up-right {
      border-left: $width solid $background-color;
    } @else if $direction == up-left {
      border-right: $width solid $background-color;
    }
  } @else if ($direction == down-right) or ($direction == down-left) {
    border-bottom: $height solid $foreground-color;

    @if $direction == down-right {
      border-left: $width solid $background-color;
    } @else if $direction == down-left {
      border-right: $width solid $background-color;
    }
  } @else if ($direction == inset-up) {
    border-color: $background-color $background-color $foreground-color;
    border-style: solid;
    border-width: $height $width;
  } @else if ($direction == inset-down) {
    border-color: $foreground-color $background-color $background-color;
    border-style: solid;
    border-width: $height $width;
  } @else if ($direction == inset-right) {
    border-color: $background-color
      $background-color
      $background-color
      $foreground-color;
    border-style: solid;
    border-width: $width $height;
  } @else if ($direction == inset-left) {
    border-color: $background-color
      $foreground-color
      $background-color
      $background-color;
    border-style: solid;
    border-width: $width $height;
  }
}

@mixin img-wrap($position: relative) {
  position: $position;
  overflow: hidden;
}

@mixin img() {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  min-height: 100%;
  min-width: 100%;
  max-width: none;
  max-height: none;

  @supports (object-fit: cover) {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
}

@mixin keyboard-intent() {
  html[data-whatintent="keyboard"] & {
    @content;
  }
}

@mixin focus-ring() {
  outline: 3px solid #e59700;
  outline-offset: 2px;
}

@mixin keyboard-focus() {
  &:focus {
    @include keyboard-intent() {
      @content;
    }
  }
}

@mixin hover-focus() {
  $this: &;
  &:hover {
    @content;
  }
  @include keyboard-focus() {
    @extend #{$this}:hover;
    outline: 0;
  }
}

@mixin container($fluid: true) {
  width: 100%;
  padding-right: var(--side-padding);
  padding-left: var(--side-padding);
  margin-left: auto;
  margin-right: auto;

  @if $fluid {
    max-width: $max-width;
  } @else {
    @each $bp, $max-width in $max-widths {
      @include up($bp) {
        max-width: $max-width;
      }
    }
  }
}
